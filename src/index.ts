import {
    Creator as PsetCreator,
    Updater as PsetUpdater,
    CreatorInput,
    CreatorOutput,
    Finalizer as PsetFinalizer,
    Extractor as PsetExtractor,
} from "liquidjs-lib";
import { Transaction } from 'liquidjs-lib/src/transaction';
import * as bscript from 'liquidjs-lib/src/script';
import * as NETWORKS from 'liquidjs-lib/src/networks';
import { ECPair } from './ecc';
import { createPayment, } from './utils';
import { address, bip341 } from 'liquidjs-lib';
import secp256k1 from '@vulpemventures/secp256k1-zkp';

const OPS = bscript.OPS;
const { BIP341Factory } = bip341;
const { testnet } = NETWORKS;
const lbtc = testnet.assetHash;

const TXID = "a2e253db3d731226dab09255dd60a0d9582bd668f6bdc45a4fb19d776ac9a4d6";
const VOUT = 0;
const TXHEX = "";
const alice = ECPair.fromWIF('cScfkGjbzzoeewVWmU2hYPUHeVGJRDdFt7WhmrVVGkxpmPP8BHWe', testnet);
const bob = ECPair.fromWIF('cMkopUXKWsEzAjfa1zApksGRwjVpJRB3831qM9W4gKZsLwjHXA9x', testnet);
const bobKeys: any[] = [bob];


main();

async function main() {
    const hex = await scriptpathwithoutsig();
    console.log(`hex: ${hex}`);
}

async function scriptpathwithoutsig() : Promise<String> {
    const bobPay = createPayment('p2wpkh', bobKeys, testnet, false);
    const bobScript = bscript.compile([
        OPS.OP_0,
        OPS.OP_INSPECTINPUTSCRIPTPUBKEY,
        OPS.OP_1,
        OPS.OP_EQUALVERIFY,
        OPS.OP_0,
        OPS.OP_INSPECTOUTPUTSCRIPTPUBKEY,
        OPS.OP_1,
        OPS.OP_EQUALVERIFY,
        OPS.OP_EQUAL,
        OPS.OP_0,
        OPS.OP_INSPECTOUTPUTVALUE,
        OPS.OP_1,
        OPS.OP_EQUALVERIFY,
        Buffer.from("e803", "hex"),//<1000> LE
        OPS.OP_SCRIPTNUMTOLE64,
        OPS.OP_GREATERTHANOREQUAL64,
        OPS.OP_VERIFY,
    ]);

    console.log(`bobScript: ${bobScript.toString('hex')}`)

    const zkpLib = await secp256k1();
    const { ecc: ecclib } = zkpLib;

    // in this exemple, alice is the internal key (can spend via keypath spend)
    // however, the script tree allows bob to spend the coin with a simple p2pkh
    const leaves: bip341.TaprootLeaf[] = [
        {
        scriptHex: bobScript.toString('hex'),
        }
    ];

    const hashTree = bip341.toHashTree(leaves);
    const output = BIP341Factory(ecclib).taprootOutputScript(
        alice.publicKey,
        hashTree,
    );
    const taprootAddress = address.fromOutputScript(output, testnet); // UNCONFIDENTIAL

    console.log(`alice pubkey ${alice.publicKey.toString("hex")}`);
    console.log(`taprootAddress ${taprootAddress}`);

    const utxo = {
        txid: TXID,
        vout: VOUT,
    };
    const txhex = TXHEX;
    const prevoutTx = Transaction.fromHex(txhex);

    const FEES = 500;
    const sendAmount = 1500;

    const inputs = [
        new CreatorInput(utxo.txid, utxo.vout),
    ];

    const outputs = [
        new CreatorOutput(
        lbtc,
        sendAmount,
        address.toOutputScript(taprootAddress),
        bobPay.payment.blindkey,
        0,
        ),
        new CreatorOutput(lbtc, FEES),
    ];

    const pset = PsetCreator.newPset({
        inputs,
        outputs,
    });

    const updater = new PsetUpdater(pset);
    updater.addInWitnessUtxo(0, prevoutTx.outs[utxo.vout]);
    updater.addInSighashType(0, Transaction.SIGHASH_ALL);

    const leafHash = bip341.tapLeafHash(leaves[0]);
    const pathToBobLeaf = bip341.findScriptPath(hashTree, leafHash);
    const [script, controlBlock] = BIP341Factory(ecclib).taprootSignScriptStack(
        alice.publicKey,
        leaves[0],
        hashTree.hash,
        pathToBobLeaf,
    );

    updater.addInTapLeafScript(0, {
        controlBlock,
        leafVersion: bip341.LEAF_VERSION_TAPSCRIPT,
        script,
    });

    const finalizer = new PsetFinalizer(pset);
    finalizer.finalize();
    const tx = PsetExtractor.extract(pset);
    const hex = tx.toHex();

    return hex;
}
